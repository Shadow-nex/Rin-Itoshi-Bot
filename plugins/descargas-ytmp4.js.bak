import axios from "axios";
import fetch from "node-fetch";
import fs from "fs";
import { sizeFormatter } from "human-readable";

const formatSize = sizeFormatter({
  std: "JEDEC",
  decimalPlaces: 2,
  keepTrailingZeroes: false,
});

let handler = async (m, { conn, text, usedPrefix, command }) => {
  try {
    if (!text)
      return conn.reply(
        m.chat,
        `üç∑ *Ingresa el enlace de YouTube que deseas descargar en formato MP4.*\n\nüìå Ejemplo:\n${usedPrefix + command} https://youtu.be/HWjCStB6k4o`,
        m
      );

    await conn.reply(m.chat, "‚è≥ *Procesando tu solicitud...*", m);
    
    const apiUrl = `https://api.vreden.my.id/api/v1/download/youtube/video?url=${encodeURIComponent(text)}&quality=360`;
    const res = await axios.get(apiUrl);

    if (!res.data?.status) throw new Error("No se pudo obtener informaci√≥n del video.");

    const result = res.data.result;
    const meta = result.metadata;
    const dl = result.download;

    const head = await fetch(dl.url, { method: "HEAD" });
    const size = head.headers.get("content-length");
    const fileSize = size ? formatSize(parseInt(size)) : "Desconocido";
    const info = `üé¨ ÔºπÔºØÔºµÔº¥ÔºµÔº¢Ôº• ‚Ä¢ Ôº≠Ôº∞4 

üç∑ *T√≠tulo:* ${meta.title}
üë§ *Autor:* ${meta.author?.name || "-"}
üïí *Duraci√≥n:* ${meta.duration?.timestamp || meta.timestamp}
üëÅÔ∏è‚Äçüó®Ô∏è *Vistas:* ${meta.views?.toLocaleString() || "-"}
üìÜ *Publicado:* ${meta.ago}
üì¶ *Tama√±o:* ${fileSize}
üß© *Calidad:* ${dl.quality}p
üåê *Fuente:* api.vreden.my.id
üìé *Enlace:* ${meta.url}
`;

    await conn.sendMessage(m.chat, {
      image: { url: meta.thumbnail },
      caption: info,
    });

    // Detectar tama√±o y tipo de env√≠o
    const limitMB = 100;
    const sizeMB = size ? parseInt(size) / 1024 / 1024 : 0;

    if (sizeMB > limitMB) {
      await conn.sendMessage(
        m.chat,
        {
          document: { url: dl.url },
          mimetype: "video/mp4",
          fileName: dl.filename,
          caption: `üé• *${meta.title}*\nüì¶ Tama√±o: ${fileSize}\nüß© Calidad: ${dl.quality}p\nüìÅ Enviado como documento por superar 100 MB.`,
        },
        { quoted: m }
      );
    } else {
      await conn.sendMessage(
        m.chat,
        {
          video: { url: dl.url },
          mimetype: "video/mp4",
          fileName: dl.filename,
          caption: `> *${meta.title}*\n> Tama√±o: ${fileSize}\n> Calidad: ${dl.quality}p`,
        },
        { quoted: m }
      );
    }
  } catch (err) {
    console.error(err);
    conn.reply(
      m.chat,
      "‚ùå *Ocurri√≥ un error al procesar tu solicitud.*\nVerifica el enlace o intenta con otro video.",
      m
    );
  }
};

handler.help = ["ytmp4 <url>"];
handler.tags = ["descargas"];
handler.command = ['ytmp4'];

export default handler;