import fetch from "node-fetch";

const handler = async (m, { conn, text, usedPrefix, command }) => {
  try {
    if (!text) {
      return conn.reply(
        m.chat,
        `Ingresa el nombre de la canción o un enlace de YouTube.\n\nEjemplo: ${usedPrefix + command} DJ Malam Pagi`,
        m
      );
    }

    // Valores por defecto
    let title = "Desconocido",
      author = "N/A",
      image = "",
      duration = 0,
      filename = "audio.mp3",
      audioUrl = null,
      views = "N/A",
      likes = "N/A",
      category = "N/A",
      quality = "N/A",
      format = "mp3",
      id = "N/A";

    // Detectar si es enlace de YouTube
    if (text.includes("youtube.com") || text.includes("youtu.be")) {
      const apiUrl = `https://api.delirius.store/download/ytmp3?url=${encodeURIComponent(text)}`;
      const res = await fetch(apiUrl);
      const json = await res.json();

      if (json?.status && json?.data?.download?.url) {
        const data = json.data;
        const download = data.download;

        title = data.title || title;
        author = data.author || author;
        image = data.image_max_resolution || data.image || image;
        duration = data.duration || 0;
        filename = download.filename || `${title}.mp3`;
        audioUrl = download.url;

        // extras
        views = data.views || views;
        likes = data.likes || likes;
        category = data.category || category;
        quality = download.quality || quality;
        format = download.extension || format;
        id = data.id || id;
      }
    } else {
      // Si es texto -> usar API Zenzzxz
      const apiUrl = `https://api.zenzxz.my.id/search/play?query=${encodeURIComponent(text)}`;
      const res = await fetch(apiUrl);
      const json = await res.json();

      if (json?.status && json?.dl_mp3) {
        const meta = json.metadata || {};

        title = meta.title || title;
        author = meta.author || "Desconocido";
        image = meta.thumbnail || image;
        duration = meta.duration || 0;
        filename = `${title}.mp3`;
        audioUrl = json.dl_mp3;

        // extras
        quality = meta.quality || quality;
        format = meta.format || format;
        id = meta.id || id;
      }
    }

    if (!audioUrl) {
      return conn.reply(m.chat, "❌ No se encontró un enlace de descarga válido.", m);
    }

    const formatDuration = (secs) => {
      const min = Math.floor(secs / 60);
      const sec = secs % 60;
      return `${min}:${sec.toString().padStart(2, "0")} min`;
    };

    // Info enriquecida
    const caption = `
╭━━━〔 🎵 Descarga Lista 🎵 〕━━⬣
┃ 📌 *Título:* ${title}
┃ 👤 *Autor:* ${author}
┃ 🆔 *ID:* ${id}
┃ ⏱️ *Duración:* ${formatDuration(duration)}
┃ 👀 *Vistas:* ${views}
┃ 👍 *Likes:* ${likes}
┃ 🗂️ *Categoría:* ${category}
┃ 🎶 *Calidad:* ${quality}
┃ 🧩 *Formato:* ${format}
┃ 📂 *Archivo:* ${filename}
╰━━━━━━━━━━━━━━━━━⬣
    `.trim();

    // Muestra info + portada
    await conn.sendMessage(
      m.chat,
      {
        image: { url: image },
        caption
      },
      { quoted: m }
    );

    // Descarga y envía el audio
    const audioRes = await fetch(audioUrl);
    const audioBuffer = await audioRes.arrayBuffer();

    await conn.sendMessage(
      m.chat,
      {
        audio: Buffer.from(audioBuffer),
        fileName: filename,
        mimetype: "audio/mpeg",
        ptt: false,
        contextInfo: {
          externalAdReply: {
            title,
            body: `🎶 ${author} | ⏱️ ${formatDuration(duration)}`,
            thumbnailUrl: image,
            mediaUrl: text,
            sourceUrl: text,
            renderLargerThumbnail: true
          }
        }
      },
      { quoted: m }
    );

  } catch (e) {
    console.error(e);
    conn.reply(m.chat, "❌ Ocurrió un error al procesar tu solicitud.", m);
  }
};

handler.help = ["ytmp3"].map(v => v + " <url o texto>");
handler.tags = ["downloader"];
handler.command = ["ytmp3"];

export default handler;