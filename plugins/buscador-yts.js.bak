import { prepareWAMessageMedia, generateWAMessageFromContent } from '@whiskeysockets/baileys';
import yts from 'yt-search';

const handler = async (m, { conn, usedPrefix, command, text }) => {
  if (!text) throw `*üå¥ Por favor, ingresa un texto para buscar en Youtube.*\n> *\`Ejemplo:\`* ${usedPrefix + command} Bing Bang`;

  const results = await yts(text);
  const videos = results.videos.slice(0, 10);

  if (!videos.length) throw '‚ö†Ô∏è *No se encontraron resultados para tu b√∫squeda.*';

  const randomVideo = videos[Math.floor(Math.random() * videos.length)];

  // üìå Tabla con resultados
  let listado = videos.map((v, i) => 
    `‚ï≠‚îÄ‚ä∞ *${i + 1}.* ${v.title}\n` +
    `‚îÇ ‚å¨ Autor: ${v.author.name}\n` +
    `‚îÇ ‚å¨ Duraci√≥n: ${v.timestamp}\n` +
    `‚îÇ ‚å¨ Vistas: ${v.views.toLocaleString()}\n` +
    `‚îÇ ‚å¨ Link: ${v.url}\n` +
    `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
  ).join("\n\n");

  const media = await prepareWAMessageMedia(
    { image: { url: randomVideo.thumbnail } },
    { upload: conn.waUploadToServer }
  );

  const interactiveMessage = {
    body: {
      text: `‚îè‚îÅ‚îÅ‚îÅ‚ù∞ ‰πÇ *YOUTUBE - SEARCH* ‰πÇ ‚ù±‚îÅ‚îÅ‚îÅ‚îì\n\n` +
            `üé¨ *Video destacado:*\n\n` +
            `‚â° üìå *T√≠tulo:* ${randomVideo.title}\n` +
            `‚â° üåµ *Autor:* ${randomVideo.author.name}\n` +
            `‚â° üçÅ *Vistas:* ${randomVideo.views.toLocaleString()}\n` +
            `‚â° üåø *Duraci√≥n:* ${randomVideo.timestamp}\n` +
            `‚â° üîó *Enlace:* ${randomVideo.url}\n\n` +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n` +
            `üìú *Lista completa de resultados:*\n\n${listado}`
    },
    footer: { text: 's·¥ú·¥ã·¥ú…¥·¥Ä  ô·¥è·¥õ ·¥ç·¥Ö' },
    header: {
      title: '```‰πÇ YOUTUBE - SEARCH```',
      hasMediaAttachment: true,
      imageMessage: media.imageMessage
    },
    nativeFlowMessage: {
      buttons: [
        {
          name: 'single_select',
          buttonParamsJson: JSON.stringify({
            title: 'Opciones de descarga',
            sections: videos.map(video => ({
              title: `${video.title}`,
              rows: [
                {
                  header: video.title,
                  title: video.author.name,
                  description: `‚¨áÔ∏è Descargar audio | Duraci√≥n: ${video.timestamp}`,
                  id: `.ytmp3 ${video.url}`
                },
                {
                  header: video.title,
                  title: video.author.name,
                  description: `‚¨áÔ∏è Descargar video | Duraci√≥n: ${video.timestamp}`,
                  id: `.ytmp4 ${video.url}`
                }
              ]
            }))
          })
        }
      ],
      messageParamsJson: ''
    }
  };

  const userJid = conn?.user?.jid || m.key.participant || m.chat;
  const msg = generateWAMessageFromContent(m.chat, { interactiveMessage }, { userJid, quoted: m });
  conn.relayMessage(m.chat, msg.message, { messageId: msg.key.id });
};

handler.help = ['yts <texto>'];
handler.tags = ['buscador'];
handler.command = ['yts', 'ytsearch'];

export default handler;