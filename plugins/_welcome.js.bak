/*import { WAMessageStubType } from '@whiskeysockets/baileys'
import fetch from 'node-fetch'

export async function before(m, { conn, participants, groupMetadata }) {
    if (!m.messageStubType || !m.isGroup) return true

    // --- FUNCIONES AUXILIARES ---
    const getPais = (numero) => {
        const paisesPorPrefijo = {
            "1": "🇺🇸 Estados Unidos",
            "34": "🇪🇸 España",
            "52": "🇲🇽 México",
            "54": "🇦🇷 Argentina",
            "55": "🇧🇷 Brasil",
            "56": "🇨🇱 Chile",
            "57": "🇨🇴 Colombia",
            "58": "🇻🇪 Venezuela",
            "591": "🇧🇴 Bolivia",
            "593": "🇪🇨 Ecuador",
            "595": "🇵🇾 Paraguay",
            "598": "🇺🇾 Uruguay",
            "502": "🇬🇹 Guatemala",
            "503": "🇸🇻 El Salvador",
            "504": "🇭🇳 Honduras",
            "505": "🇳🇮 Nicaragua",
            "506": "🇨🇷 Costa Rica",
            "507": "🇵🇦 Panamá",
            "51": "🇵🇪 Perú",
            "53": "🇨🇺 Cuba",
            "91": "🇮🇳 India"
        }
        const numeroLimpio = numero.replace(/\D/g,'') 
        for (let i = 1; i <= 3; i++) {
            const prefijo = numeroLimpio.slice(0, i)
            if (paisesPorPrefijo[prefijo]) return paisesPorPrefijo[prefijo]
        }
        return "🌎 Desconocido"
    }

    const getTimeZone = (numero) => {
        const zonasHorarias = {
            "1": "America/New_York",
            "34": "Europe/Madrid",
            "52": "America/Mexico_City",
            "54": "America/Argentina/Buenos_Aires",
            "55": "America/Sao_Paulo",
            "56": "America/Santiago",
            "57": "America/Bogota",
            "58": "America/Caracas",
            "591": "America/La_Paz",
            "593": "America/Guayaquil",
            "595": "America/Asuncion",
            "598": "America/Montevideo",
            "502": "America/Guatemala",
            "503": "America/El_Salvador",
            "504": "America/Tegucigalpa",
            "505": "America/Managua",
            "506": "America/Costa_Rica",
            "507": "America/Panama",
            "51": "America/Lima",
            "53": "America/Havana",
            "91": "Asia/Kolkata"
        }
        const numeroLimpio = numero.replace(/\D/g,'')
        for (let i = 1; i <= 3; i++) {
            const prefijo = numeroLimpio.slice(0, i)
            if (zonasHorarias[prefijo]) return zonasHorarias[prefijo]
        }
        return "America/Lima"
    }

    const numeroUsuario = m.key.participant?.split('@')[0].replace(/\D/g,'')
    if (!numeroUsuario) return
    const pais = getPais(numeroUsuario)
    const zona = getTimeZone(numeroUsuario)

    const thumbRes = await fetch("https://files.catbox.moe/jkw74m.jpg")
    const thumbBuffer = await thumbRes.buffer()
    const fkontak = {
        key: { participants: "0@s.whatsapp.net", remoteJid: "status@broadcast", fromMe: false, id: "Halo" },
        message: { locationMessage: { name: `(☆ RIN ITOSHI ULTRA ☆) ⭐`, jpegThumbnail: thumbBuffer } },
        participant: "0@s.whatsapp.net"
    }

    let ppUrl = await conn.profilePictureUrl(m.messageStubParameters[0] || m.key.participant, 'image')
        .catch(_ => 'https://raw.githubusercontent.com/The-King-Destroy/Adiciones/main/Contenido/1745522645448.jpeg')

    let chat = global.db.data.chats[m.chat]
    let groupSize = participants.length
    if (m.messageStubType == 27) groupSize++         
    else if (m.messageStubType == 28 || m.messageStubType == 32) groupSize--

    let fechaObj = new Date()
    let hora = fechaObj.toLocaleTimeString('es-PE', { timeZone: zona, hour: '2-digit', minute: '2-digit' })
    let fecha = fechaObj.toLocaleDateString('es-PE', { day: 'numeric', month: 'long', year: 'numeric', timeZone: zona })
    let dia = fechaObj.toLocaleDateString('es-PE', { weekday: 'long', timeZone: zona })

    // --- MENSAJE BIENVENIDA ---
    if (chat.welcome && m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_ADD) {
        // Usamos el número limpio
        const entranteNumero = String(m.participants?.[0] || m.key.participant).split('@')[0].replace(/\D/g,'')
        let welcomeMessage = `*🌸━━✦ WELCOME ✦━━🌸*\n
✨ ¡@${entranteNumero}, un nuevo nakama ha llegado al clan! ⚔️
🎌 Grupo: *${groupMetadata.subject}*
📅 Fecha: ${dia}, ${fecha}
⏰ Hora: ${hora}
🌍 País: ${getPais(entranteNumero)}
👥 Miembros: ${groupSize}

🌟 ¡Prepara tus poderes y que comience la aventura! 🐉
💬 Recuerda saludar a todos y compartir tu energía positiva 💖
`
        const fakeContext = {
            contextInfo: {
                isForwarded: true,
                forwardedNewsletterMessageInfo: { newsletterJid: "120363401008003732@newsletter", serverMessageId: '', newsletterName: "₊꒰✩ RIN ITOSHI BOT ✿" },
                externalAdReply: { title: "☆ Rin Itoshi Bot ☆", body: "Desarrollado x ShadowCore", mediaUrl: null, description: null, previewType: "PHOTO", thumbnailUrl: ppUrl, sourceUrl: "https://instagram.com", mediaType: 1, renderLargerThumbnail: false },
                mentionedJid: [entranteNumero + "@s.whatsapp.net"]
            }
        }
        await conn.sendMessage(m.chat, { image: { url: ppUrl }, caption: welcomeMessage, ...fakeContext }, { quoted: fkontak })
    }

    // --- MENSAJE DESPEDIDA ---
    if (chat.welcome && (m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_LEAVE || m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_REMOVE)) {
        // Para salidas usamos m.participants[0] que garantiza el número real
        const eliminadoNumero = String(m.participants?.[0] || m.key.participant).split('@')[0].replace(/\D/g,'')
        let byeMessage = `*💔━━✦ GOODBYE ✦━━💔*\n
😢 @${eliminadoNumero} ha sido eliminado del grupo *${groupMetadata.subject}*.
📅 Fecha: ${dia}, ${fecha}
⏰ Hora: ${hora}
🌍 País: ${getPais(eliminadoNumero)}
👥 Miembros restantes: ${groupSize}

🕊️ Que tus caminos sean épicos, nakama 🌸
⚡ ¡Siempre serás parte de nuestra historia! ✨
`
        const fakeContext = {
            contextInfo: {
                isForwarded: true,
                forwardedNewsletterMessageInfo: { newsletterJid: "120363401008003732@newsletter", serverMessageId: '', newsletterName: "₊꒰✩ RIN ITOSHI BOT ✿" },
                externalAdReply: { title: "☆ Rin Itoshi Bot ☆", body: "Desarrollado x ShadowCore", mediaUrl: null, description: null, previewType: "PHOTO", thumbnailUrl: ppUrl, sourceUrl: "https://instagram.com", mediaType: 1, renderLargerThumbnail: false },
                mentionedJid: [eliminadoNumero + "@s.whatsapp.net"]
            }
        }
        await conn.sendMessage(m.chat, { image: { url: ppUrl }, caption: byeMessage, ...fakeContext }, { quoted: fkontak })
    }
}
*/

import { WAMessageStubType } from '@whiskeysockets/baileys';

export async function before(m, { conn, participants, groupMetadata }) {
  if (!m.messageStubType || !m.isGroup) return true;

  const chat = globalThis.db.data.chats[m.chat];
  const nombre = globalThis.db.data.users[m.messageStubParameters[0]]?.name || {};
  const botId = conn.user.jid;

  const ppUrl = await conn.profilePictureUrl(m.messageStubParameters[0], 'image')
    .catch(() => "https://stellarwa.xyz/files/1752115005119.jpg");

  const name = nombre || conn.getName(m.messageStubParameters[0]);
  const actionUser = m.key.participant ? await conn.getName(m.key.participant) : null;

  const actionMessages = {
    [WAMessageStubType.GROUP_PARTICIPANT_ADD]: actionUser ? `\n┊➤ *Agregado por ›* @${m.key.participant.split`@`[0]}` : '',
    [WAMessageStubType.GROUP_PARTICIPANT_REMOVE]: actionUser ? `\n┊➤ *Eliminado por ›* @${m.key.participant.split`@`[0]}` : '',
    [WAMessageStubType.GROUP_PARTICIPANT_LEAVE]: ''
  };

  const userss = m.messageStubParameters[0];
  const formatText = (template, memberCount) => {
    return template
      .replace('@user', `@${userss.split`@`[0]}`)
      .replace('@group', groupMetadata.subject)
      .replace('@date', new Date().toLocaleString())
      .replace('@users', `${memberCount}`)
      .replace('@type', actionMessages[m.messageStubType])
      .replace('@desc', groupMetadata.desc?.toString() || '✿ Sin Desc ✿');
  };

  let memberCount = participants.length;
  if (m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_ADD) memberCount += 1;
  else if ([WAMessageStubType.GROUP_PARTICIPANT_REMOVE, WAMessageStubType.GROUP_PARTICIPANT_LEAVE].includes(m.messageStubType)) memberCount -= 1;

const welcomeMessage = formatText(chat.sWelcome || `╭┈────────────◯◝
┊「 *Bienvenido* 🤗 」
┊  *Nombre:* @user
┊  *Grupo:* @group
┊┈────────────◯◝ @type
┊➤ *Usa .menu para ver los* 
┊ *comandos.*
┊➤ *Ahora somos @users miembros.*
╰─────────────────◯`, memberCount);

  const byeMessage = formatText(chat.sBye || `╭┈────────────◯◝
┊「 *Hasta pronto 👋* 」
┊  *Nombre:* @user
┊┈────────────◯◝ @type
┊➤ *Ojalá que vuelva pronto.*
┊➤ *Ahora somos @users miembros.*
╰─────────────────◯`, memberCount);

  const leaveMessage = formatText(chat.sBye || byeMessage, memberCount);
  const mentions = [userss, m.key.participant];

  const fakeContext = {
    contextInfo: {
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
        newsletterJid: "120363422169517881@newsletter",
        serverMessageId: '',
        newsletterName: "MagnosBot| CHANNEL"
      },
      externalAdReply: {
        title: packname,
        body: dev,
        mediaUrl: null,
        description: null,
        previewType: "PHOTO",
        thumbnailUrl: icon,
        sourceUrl: redes,
        mediaType: 1,
        renderLargerThumbnail: false
      },
      mentionedJid: mentions
    }
  };

        if (chat.welcome && m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_ADD) {
    let caption = welcomeMessage;
    await conn.sendMessage(m.chat, { image: { url: ppUrl }, caption, ...fakeContext });
  }

        if (chat.welcome && m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_LEAVE) {
    let caption = byeMessage;
    await conn.sendMessage(m.chat, { image: { url: ppUrl }, caption, ...fakeContext });
  }
        if (chat.welcome && m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_REMOVE) {
    let caption = welcomeMessage;
    await conn.sendMessage(m.chat, { image: { url: ppUrl }, caption, ...fakeContext });
  }
}